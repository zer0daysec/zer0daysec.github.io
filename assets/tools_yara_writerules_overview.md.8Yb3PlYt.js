import{_ as e,c as n,a3 as a,o as s}from"./chunks/framework.DtMx7FFi.js";const o=JSON.parse('{"title":"概述","description":"","frontmatter":{"layout":"doc","title":"概述"},"headers":[],"relativePath":"tools/yara/writerules/overview.md","filePath":"tools/yara/writerules/overview.md"}'),l={name:"tools/yara/writerules/overview.md"};function i(d,t,r,c,p,g){return s(),n("div",null,t[0]||(t[0]=[a(`<div class="title-wrapper"><div class="page-title">概述</div><div class="post-title">—— yara 使用手册 · 编写 yara 规则 <span class="lastModifyTime"><i class="fa-regular fa-clock"></i> 最后更新： 2023-03-14 08:27:53 </span></div></div><p>Yara 规则易于编写和理解，并且具有类似于 C 语言的语法，以下为 Yara 一个最简单的规则，不执行任何操作：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rule dummy</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    condition:</span></span>
<span class="line"><span>        false</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Yara 中的每条规则均以关键字 <code>rule</code> 开头，后跟规则标识符。标识符必须遵循与 C 语言相同的词法约定，可以包含任何字母数字字符和下划线字符，但第一个字符不能是数字。规则标识符区分大小写，且不能超过 128 个字符。以下关键字是保留的，不能用作标识符：</p><table tabindex="0"><thead><tr><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th><th style="text-align:center;"></th></tr></thead><tbody><tr><td style="text-align:center;">all</td><td style="text-align:center;">and</td><td style="text-align:center;">any</td><td style="text-align:center;">ascii</td><td style="text-align:center;">at</td><td style="text-align:center;">base64</td><td style="text-align:center;">base64wide</td></tr><tr><td style="text-align:center;">contains</td><td style="text-align:center;">endswith</td><td style="text-align:center;">entrypoint</td><td style="text-align:center;">false</td><td style="text-align:center;">filesize</td><td style="text-align:center;">for</td><td style="text-align:center;">fullword</td></tr><tr><td style="text-align:center;">import</td><td style="text-align:center;">icontains</td><td style="text-align:center;">iendswith</td><td style="text-align:center;">iequals</td><td style="text-align:center;">in</td><td style="text-align:center;">include</td><td style="text-align:center;">int16</td></tr><tr><td style="text-align:center;">int32</td><td style="text-align:center;">int32be</td><td style="text-align:center;">int8</td><td style="text-align:center;">int8be</td><td style="text-align:center;">istartswith</td><td style="text-align:center;">matches</td><td style="text-align:center;">meta</td></tr><tr><td style="text-align:center;">none</td><td style="text-align:center;">not</td><td style="text-align:center;">of</td><td style="text-align:center;">or</td><td style="text-align:center;">private</td><td style="text-align:center;">rule</td><td style="text-align:center;">startswith</td></tr><tr><td style="text-align:center;">them</td><td style="text-align:center;">true</td><td style="text-align:center;">uint16</td><td style="text-align:center;">uint16be</td><td style="text-align:center;">uint32</td><td style="text-align:center;">uint32be</td><td style="text-align:center;">uint8</td></tr><tr><td style="text-align:center;">wide</td><td style="text-align:center;">xor</td><td style="text-align:center;">defined</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p>规则通常由两部分组成：字符串定义和条件，如果规则不依赖于任何字符串，则可以省略字符串定义部分，但条件部分始终是必需的。字符串定义部分是定义将成为规则一部分的字符串的地方。每个字符串都有一个标识符，由 <code>$</code> 字符后跟一系列字母数字字符和下划线组成，这些标识符可以在条件部分中使用来引用相应的字符串。字符串可以以文本或十六进制形式定义，如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rule ExampleRule</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    strings:</span></span>
<span class="line"><span>        $my_text_string = &quot;text here&quot;</span></span>
<span class="line"><span>        $my_hex_string = { E2 34 A1 C8 23 FB }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    condition:</span></span>
<span class="line"><span>        $my_text_string or $my_hex_string</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>文本字符串用双引号括起来，就像 C 语言一样。十六进制字符串由大括号括起来，由一系列可以连续出现或以空格分隔的十六进制数字组成，==十六进制字符串中不允许使用十进制数字==。</p><p>条件部分是规则逻辑所在的地方，该部分必须包含一个布尔表达式，告诉文件或进程在什么情况下满足规则。通常，条件将通过使用其标识符来引用先前定义的字符串。在此上下文中，字符串标识符充当布尔变量，如果在文件或进程内存中找到该字符串，则结果为 true，否则为 false。</p>`,9)]))}const x=e(l,[["render",i]]);export{o as __pageData,x as default};
